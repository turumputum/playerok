extends layout.pug


mixin table-row(index, name, path)
    tr  
        td.w-5(data-label="#")= index 
        td(data-label="Name")= name 
        td(data-label="Path")= path
        td(data-label="Controls")
            button.mx-1.btn.btn-outline-secondary.btn-sm(type='button' onclick=`edit_playlist_modal('${path}')`) edit
            button.mx-1.btn.btn-outline-secondary.btn-sm(type='button' data-bs-toggle='modal' data-bs-target='#verify_delete' d-name=name d-index=index) delete


block content
    link(type="text/css" href="bootstrap5-toggle/css/bootstrap5-toggle.css" rel="stylesheet")
    script(src="bootstrap5-toggle/js/bootstrap5-toggle.min.js")
    link(rel='stylesheet', href="/assets/editor.css")

    div(style='padding-top: 56px; ').container-xxl
        card.card.card_shadow.h-100.mt-4
            .bg-secondary.card-img-top
                .h4.mx-2.mt-2 Available playlists
            .card_body.p-2
                table.table.table-hover
                    thead
                        tr
                            th(scope='col' style='width:3%') #
                            th(scope='col' style='width:20%') Name
                            th(scope='col' style='width:62%') Path
                            th(scope='col' style='width:15%') Control
                    tbody
                        each playlist, index in playlist_table
                            //- var pt_ind = playlist_table.findIndex(o => o.id_md5 == task.id_md5)
                            //- console.log(playlist_table[index].name)
                            if playlist.type == 'multimedia'
                                +table-row(index+1, playlist.name, playlist.path)
                        
                        tr
                            td(colspan='3')
                            td(data-label="Controls") 
                                button.btn.btn-outline-secondary.btn-sm.mx-1(type='button' data-bs-toggle='modal' data-bs-target='#newPlaylistModal') add

    //----------------------Edit playlist MODAL----------------------------
    include modals/editPlaylist_modal.pug

    //-------------------EDIT TRACK-----------------------------
    include modals/editTrack_modal.pug
    


    #newPlaylistModal.modal.modal-xl.modal-fullscreen-xl-down.fade(tabindex='-1' aria-labelledby='newPlaylistModal' aria-hidden='true' data-bs-backdrop="static")
        .modal-dialog.modal-dialog-centered
            .modal-content
                .modal-header(style='background-color: rgb(177, 220, 226);')
                    h4.editTrackModalTitle New playlist:
                .modal-body
                    .input-group
                        span.input-group-text.fs-5.fw-bold Playlist name:
                        input#newPlaylist_name_input.fs-5.fw-bold.form-control(type="text" style='color: rgb(106, 143, 148)')
                .modal-footer
                    button.btn.btn-secondary(onclick = 'newPlaylist()') Create
                    button.btn.btn-secondary(data-bs-dismiss="modal" onclick = '') Cancel
    
    #confirmDeleteTrackModal.modal.modal-xl.modal-fullscreen-xl-down.fade(tabindex='-1' aria-labelledby='newPlaylistModal' aria-hidden='true' data-bs-backdrop="static")
        .modal-dialog.modal-dialog-centered
            .modal-content
                .modal-header(style='background-color: rgb(177, 220, 226);')
                    h4.editTrackModalTitle Delete track:
                .modal-body
                    .input-group
                        span.input-group-text.fs-5.fw-bold Track name:
                        input#deleteTrack_name_input.fs-5.fw-bold.form-control(type="text" style='color: rgb(106, 143, 148)' disabled='' readonly='')
                .modal-footer
                    button.btn.btn-secondary(onclick = 'delete_track()') Confirm
                    button.btn.btn-secondary(onclick = 'cancel_delete_track()') Cancel

    //----------------------Confirm delete MODAL----------------------------
    #verify_delete.modal.fade(aria-hidden='true' aria-labelledby='verify_deleteModalLabel' tabindex='-1')
        .modal-dialog.modal-dialog-centered
            .modal-content
                .modal-header
                    h1#verify_delete.modal-title.fs-5 Confirm delete
                    button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                .modal-body
                    h2.name_to_delete
                .modal-footer
                    button.btn.btn-primary(data-bs-dismiss="modal" onclick = 'delete_playlist()') Delete
                    button.btn.btn-primary(data-bs-dismiss="modal") Cancel


    //script(src="assets/editor.js")
    script.
        let config = !{JSON.stringify(config)}

        var editPlaylistModal = document.getElementById('editPlaylistModal')
        //var simpleContTable = editModal.querySelector('.simpleContTable')
        var tableSC = document.getElementById('simpleContTable').getElementsByTagName('tbody')[0];
        var tableIC = document.getElementById('interactiveContTable').getElementsByTagName('tbody')[0];

        var current_playlist_path = ''
        var current_track_index = ''

        var edit_track_mode
        var current_playlist
        var content_table

        getTopicList()

        function newPlaylist(){
            let playlist = {
                playlist_name: $('#newPlaylist_name_input').val(),
                version: "1.0",
                actions:[],
                controls:[],
                tracks:[]
            }
            current_playlist_path='data/playlists/'+playlist.playlist_name+'.json'
            fetch_post_playlist(current_playlist_path, playlist).then(()=>{
                window.location.reload();
            })
        }

        function edit_playlist_modal(path) {
            current_playlist_path = path
            fetch_get_playlist().then(()=>{
                $('#editPlaylistModal').modal('show')
            })
        }


        var confirm_delete = document.getElementById('verify_delete')
        var delete_index = 0
        confirm_delete.addEventListener('show.bs.modal', function (event) {
            var delete_button = event.relatedTarget

            var modal_header_task_name = confirm_delete.querySelector('.name_to_delete')

            modal_header_task_name.innerHTML = delete_button.getAttribute('d-name')
            delete_index = delete_button.getAttribute('d-index')
        })

        async function delete_playlist(index){
            var modal_header_task_name = confirm_delete.querySelector('.name_to_delete')
            //var delete_button = event.relatedTarget
            var data = {
                index_to_delete : delete_index,
                name_to_delete: modal_header_task_name.innerHTML
            }
            console.log('Playlist name to delete: ' + data.index_to_delete)
            fetch('/delete_playlist', {
                method: 'POST',
                headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: JSON.stringify(data)
            }).then((res) => {
                console.log("delete POST OK:", res)
                window.location.reload();
                }).catch((err) => {
                console.log(err)
                })
        }

        async function fetch_post_playlist(path, playlist) {
            outData = {
                path: path,
                playlist: playlist
            }
            return fetch('/save_playlist', {
                method: 'POST',
                headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: JSON.stringify(outData)
            }).then((res) => {
                console.log("Playlist POST OK, res: ", res)
                
                }).catch((err) => {
                console.log(err)
            })
        }

        function delete_track(){
            console.log("lets delete track name: " + current_playlist.tracks[current_track_index].name)
            current_playlist.tracks.splice(current_track_index,1)
            fetch_post_playlist(current_playlist_path, current_playlist).then(()=>{
                //window.location.reload();
                //update_playlist_modal()
                //$('#editPlaylistModal').reload()
                $('#confirmDeleteTrackModal').modal('hide')
            }).then(()=>{
                $('#editPlaylistModal').modal('show')
            })
        }

        function cancel_delete_track(){
            $('#confirmDeleteTrackModal').modal('hide')
            $('#editPlaylistModal').modal('show')
        }

        async function fetch_get_playlist(){
            return fetch(`/get_playlist?${current_playlist_path}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            }).then((res) => res.json()
            ).then((dat) => {
                console.log("GET play list, res: ", dat.playlist.tracks) 
                current_playlist = dat.playlist
                content_table = dat.content_table
            }).catch((err) => {
                console.log(err)
            })
        }


        function getTopicList(){
            let brokerAddress = `ws://${location.host}:1890/mqtt`
            client = mqtt.connect(brokerAddress)
            
            client.on('connect', function () {
                console.log("mqtt brocker connected!");
                client.subscribe('clients/#')
            })

            client.on('message', function (topic, message) {
                if(topic.includes('topics')){
                    //console.log("Incoming topic list msg")
                    let msg = JSON.parse(message)
                    //console.log(msg)
                    for(let i in msg.triggers){
                        $(`#trigger_topics_list`).append($('<option>', {value: `${msg.triggers[i]}`}))
                    }
                    for(let i in msg.actions){
                        $(`#action_topics_list`).append($('<option>', {value: `${msg.actions[i]}`}))
                    }
                }
            })
        }
    


                